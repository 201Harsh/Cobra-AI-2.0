import { Editor } from "@monaco-editor/react";
import React, { useState } from "react";

const Code = ({
  code,
  setCode,
  output,
  consoleLogs,
  handleRunCode,
  activeSection,
}: any) => {
  const [activeFile, setActiveFile] = useState<any>("frontend.jsx");

  const editorOptions: any = {
    minimap: { enabled: false },
    fontSize: 13,
    wordWrap: "on",
    automaticLayout: true,
    tabSize: 2,
    scrollBeyondLastLine: false,
    padding: { top: 16 },
    lineNumbersMinChars: 3,
    folding: false,
    touchSupported: true,
    renderLineHighlight: "all",
  };

  // Default file contents
  const files: any = {
    "frontend.jsx": `// Frontend React Component
import React, { useState } from 'react';

const App = () => {
  const [count, setCount] = useState(0);

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold text-white">Hello Cobra AI!</h1>
      <p className="text-gray-300">Count: {count}</p>
      <button 
        className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded mt-4"
        onClick={() => setCount(count + 1)}
      >
        Increment
      </button>
    </div>
  );
};

export default App;`,

    "backend.js": `// Backend Express Server
const express = require('express');
const cors = require('cors');

const app = express();
const PORT = 3000;

// Middleware
app.use(cors());
app.use(express.json());

// Routes
app.get('/', (req, res) => {
  res.json({ message: 'Hello from Cobra AI Backend!' });
});

app.get('/api/users', (req, res) => {
  res.json([
    { id: 1, name: 'John Doe', email: 'john@example.com' },
    { id: 2, name: 'Jane Smith', email: 'jane@example.com' }
  ]);
});

// Start server
app.listen(PORT, () => {
  console.log(\`ðŸš€ Server running on port \${PORT}\`);
});`,

    "package.json": `{
  "name": "cobra-ai-project",
  "version": "1.0.0",
  "description": "A full-stack project generated by Cobra AI",
  "type": "module",
  "scripts": {
    "dev": "node backend.js",
    "start": "node backend.js",
    "build": "echo 'Build process would go here'"
  },
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "vite": "^4.4.5",
    "@vitejs/plugin-react": "^4.0.3"
  }
}`,
  };

  const getLanguage = (filename: string) => {
    if (filename.endsWith(".jsx")) return "javascript";
    if (filename.endsWith(".js")) return "javascript";
    if (filename.endsWith(".json")) return "json";
    return "javascript";
  };

  return (
    <>
      <div
        className={`${
          activeSection === "code" ? "block" : "hidden"
        } lg:block h-[calc(100vh-180px)] lg:h-full`}
      >
        <div className="bg-gray-900/80 backdrop-blur-xl rounded-2xl border border-red-500/20 h-full flex flex-col">
          {/* Editor Header */}
          <div className="p-4 border-b border-red-500/20">
            <div className="flex items-center justify-between">
              <h2 className="text-xl font-bold text-white">ðŸ’» Code Editor</h2>
              <button
                onClick={handleRunCode}
                className="bg-gradient-to-r from-emerald-600 to-green-500 hover:from-emerald-700 hover:to-green-600 text-white font-semibold px-4 lg:px-6 py-2 rounded-xl transition-all duration-300 hover:shadow-[0_0_15px_rgba(16,185,129,0.5)] text-sm lg:text-base cursor-pointer"
              >
                ðŸš€ Run Code
              </button>
            </div>
          </div>

          {/* File Tabs */}
          <div className="flex border-b border-red-500/20 bg-gray-800/50">
            {Object.keys(files).map((filename) => (
              <button
                key={filename}
                onClick={() => setActiveFile(filename)}
                className={`px-4 py-3 text-sm font-medium border-b-2 transition-all duration-200 ${
                  activeFile === filename
                    ? "border-emerald-500 text-emerald-400 bg-gray-900/50"
                    : "border-transparent text-gray-400 hover:text-gray-300 hover:bg-gray-700/50"
                }`}
              >
                {filename}
              </button>
            ))}
          </div>

          {/* Monaco Editor */}
          <div className="flex-1 min-h-[300px]">
            <Editor
              height="100%"
              language={getLanguage(activeFile)}
              value={files[activeFile]}
              onChange={(value) => {
                // Update the specific file content
                files[activeFile] = value || "";
              }}
              theme="vs-dark"
              options={editorOptions}
            />
          </div>

          {/* Output & Console */}
          <div className="p-3 lg:p-4 border-t border-red-500/20 space-y-3 lg:space-y-4">
            {/* Output */}
            <div className="bg-gray-950 rounded-xl border border-red-500/20 p-3 lg:p-4">
              <h3 className="text-white font-semibold mb-2 text-sm lg:text-base">
                Output
              </h3>
              <div className="text-green-400 font-mono text-xs lg:text-sm min-h-[50px] lg:min-h-[60px] whitespace-pre-wrap overflow-auto max-h-[80px]">
                {output || "// Run your code to see output here"}
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default Code;
